/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DBUSOBJECTMANAGER_H__
#define __DBUSOBJECTMANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.ObjectManager */

#define DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER (dbus_obj_manager_org_freedesktop_dbus_object_manager_get_type ())
#define DBUS_OBJ_MANAGER_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER, dbusObjManagerOrgFreedesktopDBusObjectManager))
#define DBUS_OBJ_MANAGER_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER))
#define DBUS_OBJ_MANAGER_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER, dbusObjManagerOrgFreedesktopDBusObjectManagerIface))

struct _dbusObjManagerOrgFreedesktopDBusObjectManager;
typedef struct _dbusObjManagerOrgFreedesktopDBusObjectManager dbusObjManagerOrgFreedesktopDBusObjectManager;
typedef struct _dbusObjManagerOrgFreedesktopDBusObjectManagerIface dbusObjManagerOrgFreedesktopDBusObjectManagerIface;

struct _dbusObjManagerOrgFreedesktopDBusObjectManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_managed_objects) (
    dbusObjManagerOrgFreedesktopDBusObjectManager *object,
    GDBusMethodInvocation *invocation);

  void (*interfaces_added) (
    dbusObjManagerOrgFreedesktopDBusObjectManager *object,
    const gchar *arg_object,
    GVariant *arg_interfaces);

  void (*interfaces_removed) (
    dbusObjManagerOrgFreedesktopDBusObjectManager *object,
    const gchar *arg_object,
    const gchar *const *arg_interfaces);

};

GType dbus_obj_manager_org_freedesktop_dbus_object_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_obj_manager_org_freedesktop_dbus_object_manager_interface_info (void);
guint dbus_obj_manager_org_freedesktop_dbus_object_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_obj_manager_org_freedesktop_dbus_object_manager_complete_get_managed_objects (
    dbusObjManagerOrgFreedesktopDBusObjectManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *objects);



/* D-Bus signal emissions functions: */
void dbus_obj_manager_org_freedesktop_dbus_object_manager_emit_interfaces_added (
    dbusObjManagerOrgFreedesktopDBusObjectManager *object,
    const gchar *arg_object,
    GVariant *arg_interfaces);

void dbus_obj_manager_org_freedesktop_dbus_object_manager_emit_interfaces_removed (
    dbusObjManagerOrgFreedesktopDBusObjectManager *object,
    const gchar *arg_object,
    const gchar *const *arg_interfaces);



/* D-Bus method calls: */
void dbus_obj_manager_org_freedesktop_dbus_object_manager_call_get_managed_objects (
    dbusObjManagerOrgFreedesktopDBusObjectManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_obj_manager_org_freedesktop_dbus_object_manager_call_get_managed_objects_finish (
    dbusObjManagerOrgFreedesktopDBusObjectManager *proxy,
    GVariant **out_objects,
    GAsyncResult *res,
    GError **error);

gboolean dbus_obj_manager_org_freedesktop_dbus_object_manager_call_get_managed_objects_sync (
    dbusObjManagerOrgFreedesktopDBusObjectManager *proxy,
    GVariant **out_objects,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY (dbus_obj_manager_org_freedesktop_dbus_object_manager_proxy_get_type ())
#define DBUS_OBJ_MANAGER_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY, dbusObjManagerOrgFreedesktopDBusObjectManagerProxy))
#define DBUS_OBJ_MANAGER_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY, dbusObjManagerOrgFreedesktopDBusObjectManagerProxyClass))
#define DBUS_OBJ_MANAGER_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY, dbusObjManagerOrgFreedesktopDBusObjectManagerProxyClass))
#define DBUS_OBJ_MANAGER_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY))
#define DBUS_OBJ_MANAGER_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY))

typedef struct _dbusObjManagerOrgFreedesktopDBusObjectManagerProxy dbusObjManagerOrgFreedesktopDBusObjectManagerProxy;
typedef struct _dbusObjManagerOrgFreedesktopDBusObjectManagerProxyClass dbusObjManagerOrgFreedesktopDBusObjectManagerProxyClass;
typedef struct _dbusObjManagerOrgFreedesktopDBusObjectManagerProxyPrivate dbusObjManagerOrgFreedesktopDBusObjectManagerProxyPrivate;

struct _dbusObjManagerOrgFreedesktopDBusObjectManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  dbusObjManagerOrgFreedesktopDBusObjectManagerProxyPrivate *priv;
};

struct _dbusObjManagerOrgFreedesktopDBusObjectManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_obj_manager_org_freedesktop_dbus_object_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (dbusObjManagerOrgFreedesktopDBusObjectManagerProxy, g_object_unref)
#endif

void dbus_obj_manager_org_freedesktop_dbus_object_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
dbusObjManagerOrgFreedesktopDBusObjectManager *dbus_obj_manager_org_freedesktop_dbus_object_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
dbusObjManagerOrgFreedesktopDBusObjectManager *dbus_obj_manager_org_freedesktop_dbus_object_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_obj_manager_org_freedesktop_dbus_object_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
dbusObjManagerOrgFreedesktopDBusObjectManager *dbus_obj_manager_org_freedesktop_dbus_object_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
dbusObjManagerOrgFreedesktopDBusObjectManager *dbus_obj_manager_org_freedesktop_dbus_object_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON (dbus_obj_manager_org_freedesktop_dbus_object_manager_skeleton_get_type ())
#define DBUS_OBJ_MANAGER_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON, dbusObjManagerOrgFreedesktopDBusObjectManagerSkeleton))
#define DBUS_OBJ_MANAGER_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON, dbusObjManagerOrgFreedesktopDBusObjectManagerSkeletonClass))
#define DBUS_OBJ_MANAGER_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON, dbusObjManagerOrgFreedesktopDBusObjectManagerSkeletonClass))
#define DBUS_OBJ_MANAGER_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON))
#define DBUS_OBJ_MANAGER_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_OBJ_MANAGER_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON))

typedef struct _dbusObjManagerOrgFreedesktopDBusObjectManagerSkeleton dbusObjManagerOrgFreedesktopDBusObjectManagerSkeleton;
typedef struct _dbusObjManagerOrgFreedesktopDBusObjectManagerSkeletonClass dbusObjManagerOrgFreedesktopDBusObjectManagerSkeletonClass;
typedef struct _dbusObjManagerOrgFreedesktopDBusObjectManagerSkeletonPrivate dbusObjManagerOrgFreedesktopDBusObjectManagerSkeletonPrivate;

struct _dbusObjManagerOrgFreedesktopDBusObjectManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  dbusObjManagerOrgFreedesktopDBusObjectManagerSkeletonPrivate *priv;
};

struct _dbusObjManagerOrgFreedesktopDBusObjectManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_obj_manager_org_freedesktop_dbus_object_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (dbusObjManagerOrgFreedesktopDBusObjectManagerSkeleton, g_object_unref)
#endif

dbusObjManagerOrgFreedesktopDBusObjectManager *dbus_obj_manager_org_freedesktop_dbus_object_manager_skeleton_new (void);


/* ---- */

#define DBUS_OBJ_MANAGER_TYPE_OBJECT (dbus_obj_manager_object_get_type ())
#define DBUS_OBJ_MANAGER_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT, dbusObjManagerObject))
#define DBUS_OBJ_MANAGER_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT))
#define DBUS_OBJ_MANAGER_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT, dbusObjManagerObject))

struct _dbusObjManagerObject;
typedef struct _dbusObjManagerObject dbusObjManagerObject;
typedef struct _dbusObjManagerObjectIface dbusObjManagerObjectIface;

struct _dbusObjManagerObjectIface
{
  GTypeInterface parent_iface;
};

GType dbus_obj_manager_object_get_type (void) G_GNUC_CONST;

dbusObjManagerOrgFreedesktopDBusObjectManager *dbus_obj_manager_object_get_org_freedesktop_dbus_object_manager (dbusObjManagerObject *object);
dbusObjManagerOrgFreedesktopDBusObjectManager *dbus_obj_manager_object_peek_org_freedesktop_dbus_object_manager (dbusObjManagerObject *object);

#define DBUS_OBJ_MANAGER_TYPE_OBJECT_PROXY (dbus_obj_manager_object_proxy_get_type ())
#define DBUS_OBJ_MANAGER_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_PROXY, dbusObjManagerObjectProxy))
#define DBUS_OBJ_MANAGER_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_OBJ_MANAGER_TYPE_OBJECT_PROXY, dbusObjManagerObjectProxyClass))
#define DBUS_OBJ_MANAGER_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_PROXY, dbusObjManagerObjectProxyClass))
#define DBUS_OBJ_MANAGER_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_PROXY))
#define DBUS_OBJ_MANAGER_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_OBJ_MANAGER_TYPE_OBJECT_PROXY))

typedef struct _dbusObjManagerObjectProxy dbusObjManagerObjectProxy;
typedef struct _dbusObjManagerObjectProxyClass dbusObjManagerObjectProxyClass;
typedef struct _dbusObjManagerObjectProxyPrivate dbusObjManagerObjectProxyPrivate;

struct _dbusObjManagerObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  dbusObjManagerObjectProxyPrivate *priv;
};

struct _dbusObjManagerObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType dbus_obj_manager_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (dbusObjManagerObjectProxy, g_object_unref)
#endif

dbusObjManagerObjectProxy *dbus_obj_manager_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define DBUS_OBJ_MANAGER_TYPE_OBJECT_SKELETON (dbus_obj_manager_object_skeleton_get_type ())
#define DBUS_OBJ_MANAGER_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_SKELETON, dbusObjManagerObjectSkeleton))
#define DBUS_OBJ_MANAGER_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_OBJ_MANAGER_TYPE_OBJECT_SKELETON, dbusObjManagerObjectSkeletonClass))
#define DBUS_OBJ_MANAGER_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_SKELETON, dbusObjManagerObjectSkeletonClass))
#define DBUS_OBJ_MANAGER_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_SKELETON))
#define DBUS_OBJ_MANAGER_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_OBJ_MANAGER_TYPE_OBJECT_SKELETON))

typedef struct _dbusObjManagerObjectSkeleton dbusObjManagerObjectSkeleton;
typedef struct _dbusObjManagerObjectSkeletonClass dbusObjManagerObjectSkeletonClass;
typedef struct _dbusObjManagerObjectSkeletonPrivate dbusObjManagerObjectSkeletonPrivate;

struct _dbusObjManagerObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  dbusObjManagerObjectSkeletonPrivate *priv;
};

struct _dbusObjManagerObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType dbus_obj_manager_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (dbusObjManagerObjectSkeleton, g_object_unref)
#endif

dbusObjManagerObjectSkeleton *dbus_obj_manager_object_skeleton_new (const gchar *object_path);
void dbus_obj_manager_object_skeleton_set_org_freedesktop_dbus_object_manager (dbusObjManagerObjectSkeleton *object, dbusObjManagerOrgFreedesktopDBusObjectManager *interface_);

/* ---- */

#define DBUS_OBJ_MANAGER_TYPE_OBJECT_MANAGER_CLIENT (dbus_obj_manager_object_manager_client_get_type ())
#define DBUS_OBJ_MANAGER_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_MANAGER_CLIENT, dbusObjManagerObjectManagerClient))
#define DBUS_OBJ_MANAGER_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_OBJ_MANAGER_TYPE_OBJECT_MANAGER_CLIENT, dbusObjManagerObjectManagerClientClass))
#define DBUS_OBJ_MANAGER_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_MANAGER_CLIENT, dbusObjManagerObjectManagerClientClass))
#define DBUS_OBJ_MANAGER_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_OBJ_MANAGER_TYPE_OBJECT_MANAGER_CLIENT))
#define DBUS_OBJ_MANAGER_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_OBJ_MANAGER_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _dbusObjManagerObjectManagerClient dbusObjManagerObjectManagerClient;
typedef struct _dbusObjManagerObjectManagerClientClass dbusObjManagerObjectManagerClientClass;
typedef struct _dbusObjManagerObjectManagerClientPrivate dbusObjManagerObjectManagerClientPrivate;

struct _dbusObjManagerObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  dbusObjManagerObjectManagerClientPrivate *priv;
};

struct _dbusObjManagerObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (dbusObjManagerObjectManagerClient, g_object_unref)
#endif

GType dbus_obj_manager_object_manager_client_get_type (void) G_GNUC_CONST;

GType dbus_obj_manager_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void dbus_obj_manager_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *dbus_obj_manager_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *dbus_obj_manager_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void dbus_obj_manager_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *dbus_obj_manager_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *dbus_obj_manager_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __DBUSOBJECTMANAGER_H__ */
